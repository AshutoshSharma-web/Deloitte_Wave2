--Using DDL Statements to Create and Manage Tables
/*-1) Create the DEPT table, based on the following table instance chart. Save the statement
in a script called lab_10_01.sql, and then execute the statement in the script to
create the table. Confirm that the table is created.*/
CREATE TABLE DEPT
(ID NUMBER(7), NAME VARCHAR2(25),PRIMARY KEY(ID));

--2) Populate the DEPT table with data from the DEPARTMENTS table. Include only columns that you need.
INSERT INTO DEPT(ID,NAME) VALUES(10,'Administration');
INSERT INTO DEPT(ID,NAME) VALUES(20,'Marketing');
INSERT INTO DEPT(ID,NAME) VALUES(30,'Purchasing');
INSERT INTO DEPT(ID,NAME) VALUES(40,'Human Resources');
INSERT INTO DEPT(ID,NAME) VALUES(50,'Shipping');
INSERT INTO DEPT(ID,NAME) VALUES(60,'IT');
INSERT INTO DEPT(ID,NAME) VALUES(70,'Public Relations');
INSERT INTO DEPT(ID,NAME) VALUES(80,'Sales');
INSERT INTO DEPT(ID,NAME) VALUES(90,'Executive');
INSERT INTO DEPT(ID,NAME) VALUES(100,'Finance');
INSERT INTO DEPT(ID,NAME) VALUES(110,'Accounting');
INSERT INTO DEPT(ID,NAME) VALUES(120,'Treasury');
INSERT INTO DEPT(ID,NAME) VALUES(130,'Corporate Tax');
INSERT INTO DEPT(ID,NAME) VALUES(140,'Control And Credit');
INSERT INTO DEPT(ID,NAME) VALUES(150,'Shareholder Services');
INSERT INTO DEPT(ID,NAME) VALUES(160,'Benefits');
INSERT INTO DEPT(ID,NAME) VALUES(170,'Manufacturing');
INSERT INTO DEPT(ID,NAME) VALUES(180,'Construction');
INSERT INTO DEPT(ID,NAME) VALUES(190,'Contracting');
INSERT INTO DEPT(ID,NAME) VALUES(200,'Operations');
INSERT INTO DEPT(ID,NAME) VALUES(210,'IT Support');
INSERT INTO DEPT(ID,NAME) VALUES(220,'NOC');
INSERT INTO DEPT(ID,NAME) VALUES(230,'IT Helpdesk');
INSERT INTO DEPT(ID,NAME) VALUES(240,'Government Sales');
INSERT INTO DEPT(ID,NAME) VALUES(250,'Retail Sales');
INSERT INTO DEPT(ID,NAME) VALUES(260,'Recruiting');
INSERT INTO DEPT(ID,NAME) VALUES(270,'Payroll');

--3) Create the EMP table based on the following table instance chart. Save the statementin a script called lab_10_03.sql, 
--and then execute the statement in the script to create the table. Confirm that the table is created.
CREATE TABLE EMP
(ID NUMBER(7), 
LAST_NAME VARCHAR2(25),
FIRST_NAME VARCHAR2(25), 
DEPT_ID NUMBER(7),
FOREIGN KEY(DEPT_ID) REFERENCES DEPT(ID));

--4) Create the EMPLOYEES2 table based on the structure of the EMPLOYEES table. Include only the EMPLOYEE_ID, FIRST_NAME, 
--LAST_NAME, SALARY, and DEPARTMENT_ID columns. Name the columns in your new table ID, FIRST_NAME, LAST_NAME, SALARY, and 
--DEPT_ID, respectively.
CREATE TABLE EMPLOYEES2
(TABLE_ID NUMBER(6,0),
FIRST_NAME VARCHAR2(20),
LAST_NAME VARCHAR2(25),
SALARY NUMBER(8,2),
DEPT_ID NUMBER(4,0));

--5) Alter the EMPLOYEES2 table status to read-only.
ALTER TABLE EMPLOYEES2 READ ONLY;

--6) Try to insert the following row in the EMPLOYEES2 table: You get the following error message:
INSERT INTO EMPLOYEES2(TABLE_ID, FIRST_NAME, LAST_NAME, SALARY, DEPT_ID)
VALUES(1,'ASHU', 'TOSH', 50000, 20);

--7) Revert the EMPLOYEES2 table to the read/write status. Now, try to insert the same row again. You should get the following messages:
ALTER TABLE EMPLOYEES2 READ WRITE;
INSERT INTO EMPLOYEES2(TABLE_ID, FIRST_NAME, LAST_NAME, SALARY, DEPT_ID)
VALUES(1,'ASHU', 'TOSH', 50000, 20);

--8) Drop the EMPLOYEES2 table.
DROP TABLE EMPLOYEES2;

--Practice 1-1: Creating Other Schema Objects
--Part 1

/*1) The staff in the HR department wants to hide some of the data in the EMPLOYEES
table. Create a view called EMPLOYEES_VU based on the employee numbers,
employee last names, and department numbers from the EMPLOYEES table. The
heading for the employee name should be EMPLOYEE.*/
CREATE OR REPLACE VIEW EMPLOYEES_VU(EMPLOYEE_ID, employee, DEPARTMENT_ID)
AS SELECT EMPLOYEE_ID, LAST_NAME , DEPARTMENT_ID
FROM EMPLOYEES;

--2) Confirm that the view works. Display the contents of the EMPLOYEES_VU view.
SELECT * FROM EMPLOYEES_VU;

--Using your EMPLOYEES_VU view, write a query for the HR department to display all employee names and department numbers.
SELECT EMPLOYEE, DEPARTMENT_ID
FROM EMPLOYEES_VU;

/*4) Department 50 needs access to its employee data. Create a view named DEPT50 that
contains the employee numbers, employee last names, and department numbers for
all employees in department 50. You have been asked to label the view columns
EMPNO, EMPLOYEE, and DEPTNO. For security purposes, do not allow an employee to
be reassigned to another department through the view.*/
CREATE OR REPLACE VIEW DEPT50(EMPNO, EMPLOYEE, DEPTNO)
AS SELECT EMPLOYEE_ID, LAST_NAME, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID=50;

--5) Display the structure and contents of the DEPT50 view.
SELECT * 
FROM DEPT50;

--6) Test your view. Attempt to reassign Matos to department 80.

--Part 2
/*7) You need a sequence that can be used with the PRIMARY KEY column of the DEPT
table. The sequence should start at 200 and have a maximum value of 1,000. Have
your sequence increment by 10. Name the sequence DEPT_ID_SEQ.*/

CREATE SEQUENCE DEPT_ID_SEQ
INCREMENT BY 10
START WITH 200
MAXVALUE 1000
NOCYCLE
NOCACHE;

/*8) To test your sequence, write a script to insert two rows in the DEPT table. Name your
script lab_11_08.sql. Be sure to use the sequence that you created for the ID
column. Add two departments: Education and Administration. Confirm your
additions. Run the commands in your script.*/

INSERT INTO DEPT VALUES(DEPT_ID_SEQ.nextval, 'Education');
INSERT INTO DEPT VALUES(DEPT_ID_SEQ.nextval, 'Administration');

--9) Create a nonunique index on the NAME column in the DEPT table.
CREATE INDEX N_INDEX ON DEPT(NAME);

--10) Create a synonym for your EMPLOYEES table. Call it EMP.
CREATE SYNONYM EMP1
FOR EMPLOYEES;