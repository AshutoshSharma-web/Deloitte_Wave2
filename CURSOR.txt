--Practice 7

--1.	Create a PL/SQL block that determines the top n salaries of the employees.
--a.	Execute the lab_07_01.sql script to create a new table, top_salaries, for storing the salaries of the employees.
 CREATE TABLE TOP_SALARIES(SALARY NUMBER(9));

/*b.	In the declarative section, declare a variable v_num of type NUMBER that holds a number n representing the number of top n
earners from the employees table. For example, to view the top five salaries, enter 5. Declare another variable sal of type 
employees.salary. Declare a cursor, c_emp_cursor, that retrieves the salaries of employees in descending order. */

--c.	In the executable section, open the loop and fetch top n salaries and insert them into top_salaries table. You can use a
--simple loop to operate on the data. Also, try and use %ROWCOUNT and %FOUND attributes for the exit condition.
DECLARE
v_num NUMBER;
sal EMPLOYEES.SALARY%TYPE;
CURSOR c_emp_cursor IS
SELECT DISTINCT SALARY FROM (SELECT DISTINCT SALARY FROM EMPLOYEES ORDER BY SALARY DESC)
WHERE ROWNUM <&v_num;

BEGIN
OPEN c_emp_cursor;
LOOP
FETCH c_emp_cursor INTO sal;
INSERT INTO TOP_SALARIES VALUES(sal);
EXIT WHEN c_emp_cursor%NOTFOUND;
END LOOP;
CLOSE c_emp_cursor;
END;

--d.	After inserting into the top_salaries table, display the rows with a SELECT statement. The output shown represents the 
--five highest salaries in the employees table.
SELECT *
FROM TOP_SALARIES;

 --e.	Test a variety of special cases, such as v_num = 0 or where v_num is greater than the number of employees in the employees 
 --table. Empty the top_salaries table after each test.*/
 
 /*2.	Create a PL/SQL block that does the following:
a.	In the declarative section, declare a variable v_deptno of type NUMBER and assign a value that holds department ID.
b.	Declare a cursor, c_emp_cursor, that retrieves the last_name, salary, and manager_id of the employees working in the 
department specified in v_deptno.
c.	In the executable section, use the cursor FOR loop to operate on the data retrieved. If the salary of the employee is less 
than 5,000 and if the manager ID is either 101 or 124, display the message <<last_name>> Due for a raise. Otherwise, display 
the message <<last_name>> Not due for a raise.*/

DECLARE
v_deptno NUMBER;
v_lname VARCHAR2(20);
v_sal NUMBER;
v_m_id NUMBER;
CURSOR c_emp_cursor IS
SELECT LAST_NAME, SALARY, MANAGER_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID=&v_deptno;

BEGIN
OPEN c_emp_cursor;
LOOP
FETCH c_emp_cursor INTO v_lname, v_sal, v_m_id;
if v_sal<5000 AND (v_m_id=101 or v_m_id=124) THEN
DBMS_OUTPUT.PUT_LINE(v_lname||' DUE FOR A RAISE');
ELSE 
DBMS_OUTPUT.PUT_LINE(v_lname||' NOT DUE FOR A RAISE');
END IF;
EXIT WHEN c_emp_cursor%NOTFOUND;
END LOOP;
CLOSE c_emp_cursor;
END;

/*3.	Write a PL/SQL block that declares and uses cursors with parameters.
In a loop, use a cursor to retrieve the department number and the department name from the departments table for a department 
whose department_id is less than 100. Pass the department number to another cursor as a parameter to retrieve from the employees 
table the details of employee last name, job, hire date, and salary of those employees whose employee_id is less than 120 and 
who work in that department.
a.	In the declarative section, declare a cursor dept_cursor to retrieve department_id and department_name for those departments 
with department_id less than 100. Order by department_id.
b.	Declare another cursor emp_cursor that takes the department number as parameter and retrieves last_name, job_id, hire_date, 
and salary of those employees whose employee_id is less than 120 and who work in that department.
c.	Declare variables to hold the values retrieved from each cursor. Use the %TYPE attribute while declaring variables.
d.	Open the dept_cursor, use a simple loop, and fetch values into the variables declared. Display the department number 
and department name.
e.	For each department, open emp_cursor by passing the current department number as a parameter. Start another loop and fetch 
the values of emp_cursor into variables and print all the details retrieved from the employees table.
Note: You may want to print a line after you have displayed the details of each department. Use appropriate attributes for the 
exit condition. Also, determine whether a cursor is already open before opening the cursor.
f.	Close all the loops and cursors, and then end the executable section. Execute the script.*/

SET SERVEROUTPUT ON;
DECLARE
CURSOR dept_cursor IS
SELECT DEPARTMENT_ID, DEPARTMENT_NAME FROM DEPARTMENTS
WHERE DEPARTMENT_ID<100
ORDER BY DEPARTMENT_ID;
v_deptno DEPARTMENTS.DEPARTMENT_ID%TYPE;
v_dname DEPARTMENTS.DEPARTMENT_NAME%TYPE;

CURSOR emp_cursor(v_deptno DEPARTMENTS.DEPARTMENT_ID%TYPE) IS
SELECT LAST_NAME, JOB_ID, HIRE_DATE, SALARY
FROM EMPLOYEES
WHERE EMPLOYEE_ID<120 AND 
DEPARTMENT_ID=v_deptno;
v_lname EMPLOYEES.LAST_NAME%TYPE;
v_jobid EMPLOYEES.JOB_ID%TYPE;
v_hdate EMPLOYEES.HIRE_DATE%TYPE;
v_sal EMPLOYEES.SALARY%TYPE;

BEGIN
OPEN dept_cursor;
LOOP
FETCH dept_cursor INTO  v_deptno, v_dname;
DBMS_OUTPUT.PUT_LINE(v_deptno||' '||v_dname);
OPEN emp_cursor(v_deptno);
LOOP 
FETCH emp_cursor INTO v_lname, v_jobid, v_hdate, v_sal;
DBMS_OUTPUT.PUT_LINE(v_lname||' '||v_jobid||' '||v_hdate||' '||v_sal);
EXIT WHEN emp_cursor%NOTFOUND;
END LOOP;
CLOSE emp_cursor;
EXIT WHEN dept_cursor%NOTFOUND;
END LOOP;
END;



 
 
 